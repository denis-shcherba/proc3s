#define system
{{{system_prompt}}}

{{{deneck_setup_code}}}

{{{skill_preface_deneck}}}

{{{deneck_skills}}}

{{{ours_role}}}

#define user
State: DeneckBelieve({"block_0": Object(category="block_red", color="red", position=[0.04, -0.36, 0.02]), "block_1": Object(category="block_green", color="green", position=[0.04, -0.36, 0.02]), "block_2": Object(category="block_blue", color="blue", position=[0.04, -0.36, 0.02]), "block_3": Object(category="block_blue", color="blue", position=[0.04, -0.36, 0.02])})
Goal: Build a planar square with the four blocks

#define assistant
```python
def gen_plan(initial:DeneckBelieve, block_0_place_x:float, block_0_place_y:float, block_1_place_x, block_1_place_y, block_2_place_x, block_2_place_y, block_3_place_x, block_3_place_y):
    plan = []
    for frame_name in DeneckBelieve.frame_names:
        plan.append(Action("pick", [frame_name]))
        plan.append(Action("place", [object_name, hammer_grasp, RavenPose(x=block_0_place_x, y=block_0_place_y, z=0.02)]))
        plan.append(Action("pick", [frame_name]))
        plan.append(Action("place", [object_name, hammer_grasp, RavenPose(x=block_1_place_x, y=block_1_place_y, z=0.02)]))
        plan.append(Action("pick", [frame_name]))
        plan.append(Action("place", [object_name, hammer_grasp, RavenPose(x=block_2_place_x, y=block_2_place_y, z=0.02)]))
        plan.append(Action("pick", [frame_name]))
        plan.append(Action("place", [object_name, hammer_grasp, RavenPose(x=block_3_place_x, y=block_3_place_y, z=0.02)]))
    return plan

def gen_domain(initial:RavenBelief):
    return {
        "block_0_place_x": ContinuousSampler(TABLE_BOUNDS[0][0], TABLE_BOUNDS[0][1]),
        "block_0_place_y": ContinuousSampler(TABLE_BOUNDS[1][0], TABLE_BOUNDS[1][1]),
        "block_1_place_x": ContinuousSampler(TABLE_BOUNDS[0][0], TABLE_BOUNDS[0][1]),
        "block_1_place_y": ContinuousSampler(TABLE_BOUNDS[1][0], TABLE_BOUNDS[1][1]),
        "block_2_place_x": ContinuousSampler(TABLE_BOUNDS[0][0], TABLE_BOUNDS[0][1]),
        "block_2_place_y": ContinuousSampler(TABLE_BOUNDS[1][0], TABLE_BOUNDS[1][1]),
        "block_3_place_x": ContinuousSampler(TABLE_BOUNDS[0][0], TABLE_BOUNDS[0][1]),
        "block_3_place_y": ContinuousSampler(TABLE_BOUNDS[1][0], TABLE_BOUNDS[1][1]),
    }
```