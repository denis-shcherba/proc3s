#define system
{{{system_prompt_panda}}}

{{{bridge_setup_code}}}

{{{skill_preface}}}

{{{bridge_skills_sr}}}

{{{deneck_role}}}
Additionally, the input to `gen_initial_guess` must be exactly the `initial:BridgeState` argument, even if this isn't explicitly used within the function!

#define user
initial=BridgeState(frames=[Frame(name="block_red", x_pos=0.0, y_pos=0.1, z_pos=0.71, x_size=0.04, y_size=0.04, z_size=0.12, x_rot=0.0, y_rot=-0.0, z_rot=0.0, color="[255, 0, 0]"), Frame(name="block_green", x_pos=0.15, y_pos=0.1, z_pos=0.71, x_size=0.04, y_size=0.04, z_size=0.12, x_rot=0.0, y_rot=-0.0, z_rot=0.0, color="[0, 255, 0]"), Frame(name="block_blue", x_pos=0.3, y_pos=0.1, z_pos=0.71, x_size=0.04, y_size=0.04, z_size=0.12, x_rot=0.0, y_rot=-0.0, z_rot=0.0, color="[0, 0, 255]")])
Goal: Build a bridge. A bridge is defined as two vertical blocks next to each other and one horizontal block on top of them.

#define assistant
```python
def gen_plan(state: BridgeState, center_x: float, center_y: float, yaw: float, slack: float):
    
    import numpy as np
    
    # Build the bridge
    actions = []

    block_size_z = state.getFrame("block_red").z_size
    
    # Red #
    pos_x = np.cos(yaw) * block_size_z * .5 + center_x
    pos_y = -np.sin(yaw) * block_size_z * .5 + center_y
    actions.append(Action("pick", ["block_red", None]))
    actions.append(Action("place_sr", [pos_x, pos_y, None, None, None]))

    # Green #
    pos_x = -np.cos(yaw) * block_size_z * .5 + center_x
    pos_y = np.sin(yaw) * block_size_z * .5 + center_y
    actions.append(Action("pick", ["block_green", None]))
    actions.append(Action("place_sr", [pos_x, pos_y, None, None, None]))

    # Blue #
    pos_z = block_size_z + slack
    actions.append(Action("pick", ["block_blue", None]))
    actions.append(Action("place_sr", [center_x, center_y, pos_z, True, yaw]))
    
    return actions

def gen_initial_guess(initial:BridgeState):
    return {
        "center_x": .2, # BBO initial value
        "center_y": .2,
        "yaw": .0,
        "slack": .03,
    }
```

#define user
initial=BridgeState(frames=[Frame(name="block_red", x_pos=0.0, y_pos=0.1, z_pos=0.71, x_size=0.04, y_size=0.04, z_size=0.12, x_rot=0.0, y_rot=-0.0, z_rot=0.0, color="[255, 0, 0]"), Frame(name="block_green", x_pos=0.15, y_pos=0.1, z_pos=0.71, x_size=0.04, y_size=0.04, z_size=0.12, x_rot=0.0, y_rot=-0.0, z_rot=0.0, color="[0, 255, 0]"), Frame(name="block_blue", x_pos=0.3, y_pos=0.1, z_pos=0.71, x_size=0.04, y_size=0.04, z_size=0.12, x_rot=0.0, y_rot=-0.0, z_rot=0.0, color="[0, 0, 255]")])
Goal: Build a  planar triangle. A planar triangle is defined as three horizontal blocks placed in such a way that they resemble the lines of a triangle.

```python
def gen_plan(initial:BridgeState, x_offset: float, y_offset: float):
    
    import numpy as np

    actions = []
    block_names = ["block_red", "block_green", "block_blue"]
    for i, f in enumerate(block_names):
        
        angle = i/len(block_names) * np.pi*2

        pos_x = np.cos(angle) * .06 + x_offset
        pos_y = -np.sin(angle) * .06 + y_offset

        actions.append(Action("pick", [f, None]))
        actions.append(Action("place_sr", [pos_x, pos_y, None, True, angle + np.pi*.5]))

    return actions

def gen_initial_guess(initial: BridgeState):
    return {
        "x_offset": .4, # BBO initial value
        "y_offset": .0,
    }
```
